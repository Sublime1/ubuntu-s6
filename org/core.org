#+title: Ubuntu base docker image using s6-overlay
* Auxiliary Information                                            :noexport:
:PROPERTIES:
:CUSTOM_ID: h:24557e2a-7c1a-4a01-adaa-5cb0ae2abdf1
:END:
The setupfile contain global common property configuration:
#+SETUPFILE: .configuration/global_vars_org.setup
#+SETUPFILE: .configuration/global_property_org.setup
#+SETUPFILE: .configuration/global_vars_html.setup
#+EXPORT_FILE_NAME: ../Readme
#+OPTIONS: auto-id:t

* About
:PROPERTIES:
:CUSTOM_ID: h:3d58a96a-43d2-4e02-8d86-326f7e64d54b
:END:

This is [[https://hub.docker.com/_/ubuntu][ubuntu base docker image]] (version 20.04) using [[https://github.com/just-containers/s6-overlay][s6-overlay]].

Ubuntu-s6 is self-hosting at https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6.

If you are reading this on GitHub, then you are looking at a Git mirror of the self-hosting Ubuntu-s6 repository.  The purpose of that mirror is to test and exercise Fossil's ability to export a Git mirror and using Github CI/CD  (Github Actions). Nobody much uses the GitHub mirror, except to verify that the mirror logic works. If you want to know more about Ubuntu-s6, visit the official self-hosting site linked above.

* Table of Contents :TOC_3:noexport:
:PROPERTIES:
:CUSTOM_ID: h:53b0a7f5-76d9-4c40-a735-b6873507a6bc
:END:
- [[#about][About]]
- [[#prerequisite][Prerequisite]]
  - [[#tools][Tools]]
  - [[#third-party-tools][Third party tools]]
- [[#installation][Installation]]
  - [[#download-from-dockerhub][Download from dockerhub]]
  - [[#build-from-chiselapp-fossil][Build from chiselapp (fossil)]]
  - [[#build-from-github][Build from github]]
- [[#configuration-options][Configuration options]]
  - [[#general-options][General options]]
  - [[#timezone][Timezone]]
- [[#continues-integration][Continues Integration]]
- [[#troubleshooting][Troubleshooting]]
  - [[#log-output][Log output]]
  - [[#shell-access][Shell access]]

* Prerequisite
:PROPERTIES:
:CUSTOM_ID: h:9283ccc3-f6ff-4ca7-af60-6ba2827d1255
:END:
** Tools
:PROPERTIES:
:CUSTOM_ID: h:a3405a5c-7b6b-47d6-88e8-670a2a3e0ef9
:END:
1. *nix operation system
2. Install Docker
3. Install git (optional)
4. Install fossil (optional)
** Third party tools
:PROPERTIES:
:CUSTOM_ID: h:ff933ce2-15ea-4e97-b285-9cb705d97adc
:END:
They are using for testing and scanning:
1. BATS
2. Shellcheck
3. Hadolynt
4. Dockle
5. Snyk
6. Trivy
* Installation
:PROPERTIES:
:CUSTOM_ID: h:19c8c605-bd2e-4a06-b30f-45160b56fe33
:END:
** Download from dockerhub
:PROPERTIES:
:CUSTOM_ID: h:749f3a93-53a9-461b-b6d4-f20b72a1f70d
:END:
#+begin_example
docker pull oupfiz5/ubuntu-s6:latest
docker pull oupfiz5/ubuntu-s6:20.04
#+end_example

** Build from chiselapp (fossil)
:PROPERTIES:
:CUSTOM_ID: h:cea39dc9-87ef-4950-966f-c58c4428021f
:END:
#+begin_example
fossil clone https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6 ubuntu-s6.fossil
mkdir ubuntu-s6
cd ubuntu-s6
fossil open ../ubuntu-s6.fossil
docker build -t oupfiz5/ubuntu-s6 .
#+end_example

** Build from github
:PROPERTIES:
:CUSTOM_ID: h:3325841a-8fe0-443d-9c32-8a2c723c1b15
:END:
#+begin_example
git clone https://github.com/oupfiz5/ubuntu-s6.git
cd ubuntu-s6
docker build -t oupfiz5/ubuntu-s6 .
#+end_example

* Configuration options
:PROPERTIES:
:CUSTOM_ID: h:7c3f1b20-a1be-48b4-8d46-276029aa244f
:END:
** General options
:PROPERTIES:
:CUSTOM_ID: h:daa5b735-9632-4d65-bc55-10fc29fa940e
:END:
|--------+---------+-------------------------------------|
| Option | Default | Description                         |
|--------+---------+-------------------------------------|
| TZ     | UTC     | Set timezone, example Europe/Moscow |
|--------+---------+-------------------------------------|

** Timezone
:PROPERTIES:
:CUSTOM_ID: h:aaf92048-f4f1-42d5-b60b-525dde2e18c8
:END:
Set the timezone for the container, defaults to UTC. To set the
timezone set the desired timezone with the variable TZ.

#+begin_example
docker run -itd --restart always \
           --name ubuntu-s6  \
           --env 'TZ=Europe/Moscow' \
           oupfiz5/ubuntu-s6:latest
#+end_example

* Continues Integration
:PROPERTIES:
:CUSTOM_ID: h:78c9b494-2e3e-4f81-a297-a0bde9141a2a
:END:
For  build and push docker images we use  [[https://github.com/oupfiz5/ubuntu-s6/blob/master/.github/workflows/on-push.yaml][Github Actions workflow]]. Flow process is [[https://guides.github.com/introduction/flow/][GitHub flow]].
* Troubleshooting
:PROPERTIES:
:CUSTOM_ID: h:6237bea9-415b-4fa0-bd47-df6a8743c1f7
:END:
** Log output
:PROPERTIES:
:CUSTOM_ID: h:d899a010-2e0b-474b-93ac-ae145a09decb
:END:
For debugging and maintenance purposes you may want access the output log. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker interactive:

#+begin_example
docker run -it --rm \
       --name=ubuntu-s6 \
       oupfiz5/ubuntu-s6:latest
#+end_example

** Shell access
:PROPERTIES:
:CUSTOM_ID: h:0065f92d-56b9-454f-8224-79b322ab7132
:END:
   For debugging and maintenance purposes you may want access the containers shell. If you are using Docker version 1.3.0 or higher you can access a running containers shell by starting bash using docker exec:
#+begin_example
docker exec -it ubuntu-s6 /bin/bash
#+end_example
* Code :code:noexport:
:PROPERTIES:
:CUSTOM_ID: h:7d51c7d1-454a-4754-8597-f949683778b0
:END:
** VERSION :code:
:PROPERTIES:
:CUSTOM_ID: h:a95b6a6d-2bd4-4e0d-bb24-ff30501dc609
:END:
#+begin_src sh :shebang ""
S6_OVERLAY_VERSION='2.2.0.3'
UBUNTU_VERSION='20.04'
#+end_src
** ../.github/workflows/on-push.yaml :code:
:PROPERTIES:
:CUSTOM_ID: h:79700600-2637-47df-b585-82dcf69772da
:END:
#+begin_src yaml :shebang ""
  name: Build and push docker images

  on:
    push:
      branches:
        - master
        - main
    pull_request:
      branches:
        - master
        - main

  jobs:
    build:
      name: Build and push image to dockerhub
      runs-on: ubuntu-latest
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Login to DockerHub Registry
          run: |
            echo  ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

        - name: Build images
          run: |
            cd ${GITHUB_WORKSPACE}/src/hook
            ./build.sh

        - name: Push images
          run: |
            cd ${GITHUB_WORKSPACE}/src/hook
            ./push.sh
#+end_src

** ../.github/workflows/test.yaml :code:
:PROPERTIES:
:CUSTOM_ID: h:c3c8e871-9fa5-4f2c-934a-edd02e2f6108
:END:
#+begin_src yaml :shebang ""
  name: Tests

  # * Controls
  # Controls when the action will run.
  on:
    push:
      paths:
        - '.github/workflows/*'
        - '.github/*'
        - 'src/Dockerfile'
        - 'src/rootfs/*'
        - 'src/hook/*'
        - 'src/*.sh'
        - 'tests/**'
      branches-ignore:
        - 'master'
        - 'main'
    pull_request:
      paths:
        - '.github/workflows/*'
        - '.github/*'
        - 'src/Dockerfile'
        - 'src/rootfs/*'
        - 'src/hook/*'
        - 'src/*.sh'
        - 'tests/**'
      branches-ignore:
        - 'master'
        - 'main'
    workflow_dispatch:

  # * Environments
  env:
    CONTAINER_NAME: "ubuntu-s6"
    IMAGE_NAME: "ubuntu-s6"
    IMAGE_TAG: "${{ github.sha }}"
    REPOSITORY: "oupfiz5"

  # * Jobs
  jobs:
    checks:
      name: Checks
      runs-on: ubuntu-20.04
      steps:
        - name: Repo checkout
          uses: actions/checkout@v2

        - name: Check shell files (shellcheck)
          run: |
            sudo apt-get update -y
            sudo apt-get install shellcheck
            cd ${GITHUB_WORKSPACE}/tests
            .bats-battery/bats-core/bin/bats 01.shellchecks.bats

        - name: Check Dockerfile (hadolint)
          run: |
            cd ${GITHUB_WORKSPACE}/tests
            .bats-battery/bats-core/bin/bats 02.dockerfile_check.bats

        - name: Build image
          run: |
            cd ${GITHUB_WORKSPACE}/src
            set -a; source VERSION ; set +a;
            export IMAGE="${REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}"
            docker build \
            --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            --build-arg S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION}" \
            --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" \
            -t "${IMAGE}" \
            -f ./Dockerfile \
            .

        - name: Check docker image (dockle)
          run: |
            cd ${GITHUB_WORKSPACE}/tests
            export IMAGE="${REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}"
            .bats-battery/bats-core/bin/bats 03.docker_image_check.bats

        - name: Check docker container
          run: |
            cd ${GITHUB_WORKSPACE}/tests
            export IMAGE="${REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}"
            .bats-battery/bats-core/bin/bats 04.container_check.bats
#+end_src

** ../.github/.trigger_on_push :code:
:PROPERTIES:
:CUSTOM_ID: h:65385037-0aaf-4eec-9061-a16d94ae8d74
:END:
#+begin_src sh :shebang ""
  Trigger:3
#+end_src
** ../.gitignore :code:
:PROPERTIES:
:CUSTOM_ID: h:149873c4-3958-4403-bacb-2984c3d35f3d
:END:
#+begin_src sh :shebang ""
  .fslckout
  .projectile
#+end_src
** Dockerfile :code:
:PROPERTIES:
:CUSTOM_ID: h:19eb7209-826b-4a7c-8b4b-5d9550505451
:END:
#+begin_src sh :shebang ""
  # * Base image
  ARG UBUNTU_VERSION=20.04
  FROM ubuntu:${UBUNTU_VERSION}

  # * Arguments
  ARG S6_OVERLAY_VERSION=2.2.0.3 \
      BUILD_DATE \
      UBUNTU_VERSION

  # * Labels
  LABEL \
      maintainer="Oupfiz V <oupfiz5@yandex.ru>" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.authors="Oupfiz V (Five)" \
      org.opencontainers.image.url="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/home" \
      org.opencontainers.image.documentation="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/wiki" \
      org.opencontainers.image.source="https://chiselapp.com/user/oupfiz5/repository/ubuntu-s6/brlist" \
      org.opencontainers.image.version="0.0.3d" \
      org.opencontainers.image.revision="" \
      org.opencontainers.image.vendor="" \
      org.opencontainers.image.licenses="" \
      org.opencontainers.image.ref.name="" \
      org.opencontainers.image.title="Ubuntu image with s6 init system" \
      org.opencontainers.image.description="Ubuntu base docker image using s6-overlay" \
      org.opencontainers.ubuntu.version="${UBUNTU_VERSION}" \
      org.opencontainers.s6overlay.version="${S6_OVERLAY_VERSION}"

  # * Environment

  # * Copy
  COPY rootfs/ /

  # * Add
  ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-amd64.tar.gz /tmp/s6-overlay.tar.gz

  # * Run
  # hadolint ignore=DL3008,DL3003
  RUN apt-get update && \
      DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata --no-install-recommends && \
      apt-get clean && \
      rm -rf /var/lib/apt/lists/* && \
      cd /tmp && \
      tar xzf /tmp/s6-overlay.tar.gz -C / --exclude='./bin' && \
      tar xzf /tmp/s6-overlay.tar.gz -C /usr ./bin && \
      rm /tmp/s6-overlay.tar.gz

  # * Entrypoint
  ENTRYPOINT ["/init"]
#+end_src
** hook/build.sh :code:
:PROPERTIES:
:CUSTOM_ID: h:6f1bb832-bbfd-4447-a14b-f0c9f8545634
:END:
#+begin_src sh  :results output pp :noweb strip-export :dir ../src/hook
  # shellcheck disable=SC1091
  set -a; source ../VERSION ; set +a;

  IMAGE="${IMAGE:-oupfiz5/ubuntu-s6:${UBUNTU_VERSION}}"

  docker build \
         --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
         --build-arg S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION}" \
         --build-arg UBUNTU_VERSION="${UBUNTU_VERSION}" \
         -t "${IMAGE}" \
         -t oupfiz5/ubuntu-s6:latest \
         -f ../Dockerfile \
          ../.
#+end_src

#+RESULTS:
: oupfiz5/ubuntu-s6:20.04

** hook/push.sh :code:
:PROPERTIES:
:CUSTOM_ID: h:cb3a194b-bd12-4e0d-b99b-647b854bf592
:END:
#+begin_src sh :results output pp :noweb strip-export :dir ../src/hook
  # shellcheck disable=SC1091
  set -a; source ../VERSION ; set +a;

  # CIS-DI-0005: Enable Content trust for Docker
  # export DOCKER_CONTENT_TRUST=1

  docker push oupfiz5/ubuntu-s6:"${UBUNTU_VERSION}"
  docker push oupfiz5/ubuntu-s6:latest
#+end_src

** rootfs/etc/cont-finish.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:CUSTOM_ID: h:e352f007-4b2c-4382-a90b-0b30d9b1ddd2
:END:
#+begin_src sh :shebang ""
#+end_src

** rootfs/etc/cont-init.d/00_settimezone.sh :code:
:PROPERTIES:
:CUSTOM_ID: h:cfeb1032-a3d5-4fa4-a7df-e49336f02434
:END:
#+begin_src with-contenv :tangle-mode (identity #o755)
  # shellcheck shell=sh

  set -e

  # * User parameters
  TIMEZONE=${TZ:="UTC"}

  TZFILE="../usr/share/zoneinfo/${TIMEZONE}"

  # * Work from the /etc directory
  cd /etc

  if [ -f ${TZFILE} ]; then  # Make sure the file exists
     echo "Setting timezone to ${TIMEZONE}"
     ln -sf ${TZFILE} localtime  # Set the timezone
  else
     echo "Timezone: ${TIMEZONE} not found, skipping"
  fi
#+end_src

** rootfs/etc/fix-attrs.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:CUSTOM_ID: h:b4129b8b-08fb-4b1b-aae0-4a32709d8915
:END:
#+begin_src sh :shebang ""
#+end_src
** rootfs/etc/services.d/.gitignore :code:notangle:
:PROPERTIES:
:header-args:sh: :tangle no
:CUSTOM_ID: h:7af6e559-a193-4248-91d7-c335dd4efd95
:END:
#+begin_src sh :shebang ""
#+end_src
* Tests :test:noexport:
:PROPERTIES:
:header-args:bats+:   :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:header-args:sh+:  :tangle (concat (file-name-directory (mapconcat 'identity (split-string  buffer-file-name "org/") "")) "/tests/" (nth 4 (org-heading-components)) )
:CUSTOM_ID: h:cf5656cf-7cd9-42fa-84c7-c7fce0a2763b
:END:

** 01.shellchecks.bats :test:
:PROPERTIES:
:CUSTOM_ID: h:d2101afe-38ec-4b9e-a6f6-982801b15cc3
:END:
#+begin_src bats :results output pp :noweb strip-export

  setup() {
      targets=()
      while IFS=  read -r -d $'\0'; do
          targets+=("$REPLY")
      done < <(
          find \
              ../src/rootfs/etc \
              ../src/hook \
              -type f \
              -print0
      )
  }

  @test "Check shell files" {
        run export LC_ALL=C.UTF-8; shellcheck "${targets[@]}"
        assert_success
  }

  @test "Check VERSION file" {
        run export LC_ALL=C.UTF-8; shellcheck --shell=sh --exclude=SC2034 ../src/VERSION
        assert_success
  }

#+end_src

#+RESULTS:
: 1..2
: ok 1 Check shell files
: ok 2 Check VERSION file

** 02.dockerfile_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: h:6fb0f638-ce20-4f89-9cda-ccf615777234
:END:
#+begin_src bats :results output pp :noweb strip-export

  @test "Check Dockerfile" {
        run docker run --rm -i -v "${PWD}/../src":/work --workdir=/work  hadolint/hadolint hadolint -f json Dockerfile
        assert_success
  }

#+end_src

#+RESULTS:
: 1..1
: ok 1 Check Dockerfile
** 03.docker_image_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: h:f61d7934-5da7-4853-858f-2505c5610668
:END:

#+begin_src bats :results output pp :noweb strip-export

  setup() {
        IMAGE="${IMAGE:-oupfiz5/ubuntu-s6:latest}"
        VERSION=$(
        curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
            grep '"tag_name":' | \
            sed -E 's/.*"v([^"]+)".*/\1/' \
        )
    }

  @test "Check docker image" {
      run docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v "$(pwd)"/.dockleignore:/.dockleignore \
          goodwithtech/dockle:v"${VERSION}" \
          --exit-code 1 \
          --exit-level fatal \
          "${IMAGE}"
      assert_success
    }
#+end_src

#+RESULTS:
: 1..1
: ok 1 Check docker image

** 04.container_check.bats :test:
:PROPERTIES:
:CUSTOM_ID: h:f36747cd-2f4a-4ffe-874a-7383ef466e40
:END:
#+begin_src bats :results output pp :noweb strip-export

  setup() {
      export IMAGE="${IMAGE:-oupfiz5/ubuntu-s6:latest}"
      export CONTAINER_NAME="${CONTAINER_NAME:-ubuntu-s6}"
  }

  @test "Verify container run" {
        run docker run -d --rm --name="${CONTAINER_NAME}" "${IMAGE}"
        assert_success
  }

  @test "Verify state status container - running" {
        sleep 5
        run docker inspect --format 'result={{ .State.Status }}' "${CONTAINER_NAME}"
        assert_success
        assert_output 'result=running'
  }

  @test "Verify state running container - true" {
        run docker inspect --format 'result={{ .State.Running }}' "${CONTAINER_NAME}"
        assert_success
        assert_output 'result=true'
  }

  @test "Verify state restarting container - false" {
        run docker inspect --format 'result={{ .State.Restarting }}' "${CONTAINER_NAME}"
        assert_success
        assert_output 'result=false'
  }

  @test "Verify state error container - <empty>" {
        run docker inspect --format 'result={{ .State.Error }}' "${CONTAINER_NAME}"
        assert_success
        assert_output 'result='
  }

  @test "Verify restart count container - 0" {
        run docker inspect --format 'result={{ .RestartCount }}' "${CONTAINER_NAME}"
        assert_success
        assert_output 'result=0'
  }

  # @test "Verify AppArmor Profile - if applicable" {
  #       skip
  #       run docker inspect --format 'AppArmorProfile={{ .AppArmorProfile }}' "${CONTAINER_NAME}"
  #       assert_success
  #       refute_output "AppArmorProfile=[]"
  #       refute_output "AppArmorProfile="
  #       refute_output "AppArmorProfile=<no value>"
  # }

  @test "Verify container stop" {
        run docker container stop "${CONTAINER_NAME}"
        assert_success
  }

#+end_src

#+RESULTS:
: 1..8
: ok 1 Verify container run
: ok 2 Verify state status container - running
: ok 3 Verify state running container - true
: ok 4 Verify state restarting container - false
: ok 5 Verify state error container - <empty>
: ok 6 Verify restart count container - 0
: ok 7 Verify AppArmor Profile - if applicable # skip
: ok 8 Verify container stop

** shellcheck.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: h:a9a7b30a-0151-4ae2-862a-cd80efd77709
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
  set -e

  targets=()
  while IFS=  read -r -d $'\0'; do
      targets+=("$REPLY")
  done < <(
    find \
      ../src/rootfs/etc \
      ../src/hook \
      -type f \
      -print0
    )


  echo "Shellcheck files"
  LC_ALL=C.UTF-8 shellcheck "${targets[@]}"

  # VERSION were exclude from main check (above)
  # exclude warning https://github.com/koalaman/shellcheck/wiki/SC2034
  echo "Shellcheck VERSION"
  #LC_ALL=C.UTF-8 shellcheck --shell=sh --exclude=SC2034 VERSION

  exit $?
#+end_src

** docker_image_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: h:ce2b6525-4ea4-47b5-b5d6-c42c65b6bcb9
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
  set -e
  IMAGE_NAME="${1:-oupfiz5/ubuntu-s6:latest}"

  # * Install dockle and check targets
  # Pay attention: some checks are ignored using .dockleignore
  VERSION=$(
      curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | \
          grep '"tag_name":' | \
          sed -E 's/.*"v([^"]+)".*/\1/' \
         ) && docker run --rm \
                         -v /var/run/docker.sock:/var/run/docker.sock \
                         -v "$(pwd)"/.dockleignore:/.dockleignore \
                         goodwithtech/dockle:v"${VERSION}" \
                         --exit-code 1 \
                         --exit-level fatal \
                         "${IMAGE_NAME}"
  exit $?
#+end_src

** .dockleignore :test:
:PROPERTIES:
:CUSTOM_ID: h:6b875cbe-74f6-4f2c-be15-b606f32b2734
:END:
#+begin_src sh :shebang ""
# Use COPY instead of ADD in Dockerfile because need to add s6-overlay from urlencode
CIS-DI-0009
# Use latest tag because to check the image inside only
DKL-DI-0006
# set root to default user because it will be use for next build
CIS-DI-0001
#+end_src
** dockerfile_check.sh :test:noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: h:4bf837a1-3f9f-4217-85d3-49987abcd583
:END:
#+begin_src sh :results output pp :noweb strip-export :tangle no
    set -e

    # * Get list of targets
    targets=()
    while IFS=  read -r -d $'\0'; do
        targets+=("$REPLY")
    done < <(
      find \
         ../src/Dockerfile \
        -type f \
        -print0
      )

    # * Pull hadolint and check targets
    echo Test Dockerfile
    docker run --rm -i hadolint/hadolint < "${targets[@]}" && echo "Success"

    exit $?
#+end_src

#+RESULTS:
: Test Dockerfile
: Success
* TODO Next steps :noexport:notangle:
:PROPERTIES:
:CUSTOM_ID: h:3ffce095-9f6b-47ae-92f9-17b236b8ab88
:END:
** Security scan
:PROPERTIES:
:CUSTOM_ID: h:04db2cb5-8830-4bab-9d5b-8362fb27c3ff
:END:
- add tools:
  - Snyk
  - Trivy
- add report security artifacts
